Self introduction:-
==================
. My name is Raidi Kartheek, and I have 5 years of overall experience. I spent 1 year working as a Linux Developer, 
  and the last 4 years focusing on DevOps and Cloud.

. I am now working as senior Devops Engineer in my project

. we are using RHEL9 ,Ansible for configuration management and VM deployments,
  Terraform for Iaac, Jenkins for CICD, multiple scanning tools like Sonar,Metasploit, Veracode ,ECR scan,
  Docker for image buliding, kubernetes for container Orchestration ,
  and our testing team use few testing frameworks like Selenium and Cucumber, and shell script for simple automations and Cronjobs
  we have seperate monitoring team for ELK and prometheus.

. we take care of all the deployment form development to production through our automated process.
   we let developers only focuse on programming we handle everything else.

. we are follwing Devsecops ,shiftleft,Build once and run anywhere stragies. we have our centralised CICD
  pipelines powered by Jenkins shared libraries --> Tools


git:-
----
. we are following feature branching model . we have 2 types of branches .One is main as  long lived branches
  everything else is feture branches.earlier we followed git model where we had master and development
  as a long lived branches and release, feature and hotfix as short lived brances.

. Developers create feture branches , once they push the code to remote branch we configure automated 
  development pipelines through Jenkins webhooks.
  
. once they complete development they raise PR and get the approval. and We follow merege strategy. 

devsecops:-
-------
. we follwing  shift left where we can scan and test the application in early stages like development
  so that we can filter majority issues while development is going on

. we have sonarQube for static source code analysis and static application security testing. 
  we have Quality gates configured where we it checks for 0 issue , 0 bugs ,  0 Vulnerabilities, Maintainbility and security rating is A.
  Minimum code coverage is 80% if application failed to meet this criteria we will fail the Build.
  

. we are using veracode for dynamic applications security testing , before going for QA we submit our application URL as target in veracode for attack.
  if we find serious issues we work with developer to resolve them. 
 
. we have Metasploit as open source scanning tool, where we scan all the dependencies of a application .
  this  tools recommends any upgrade or issues on the dependencies.
  
. we buid application in only dev environment we promote the same build into multiple environment with different configuration through helm charts , 
	so here we addressed the issue of working in Dev and not to working in PROD.

. we are using jenkins shared library, we  have centralised pipelines for different programming langugages with different deployment platform.
  we have nodeJSEKS,JavaVM ,JavaEKS ,pythonEKS Pipelines.
  we make sure every component follow the same process of deployments.

. When we move to QA environment, our developers trigger pipeline it can fetch 
  the image from ECR deploy the application through our helmcharts then we are calling testing team pipelines for integration tests.

. Before going for PROD, we have a CR(Change Request) process approval. 
  Our support raises CR ticket in JIRA mentioning time, description, roll back plan, scanning results, testing results.
  Once it is approved we trigger PROD piplines in deployment window.

. Our pipeline checks for the JIRA status, deployment window. 
  if everything is fine we fetch the image and deploy application in PROD environment.
  Later developers a simple sanity check.



ROLES & RESPONSIBILITIES:-
=========================
. We are a team of five members, leveraging JIRA as our project management tool to log and track our work. 
  Our workflow is structured around the Agile Sprint Process, 
  and we hold daily stand-up meetings .
. My team leader assings the task to us.

. we onboard projects into our Devops process.
.I was primarily responsible for infrastructure automation using Terraform and Kubernetes application deployments.

.Before automation, AWS infrastructure was manually created, leading to inconsistencies and delays. To solve this, 
 I developed Terraform modules for VPC, EKS, RDS, and ALB, ensuring scalable and reusable infrastructure. 
 Instead of using Terraform Workspaces, we maintained separate Terraform state files in S3 for each environment, 
 with DynamoDB for state locking. This eliminated conflicts and ensured smooth deployments.

.On the Kubernetes side, I automated deployments using Helm charts and configured Kubernetes auto-scaling with Cluster Autoscaler & HPA. 
 We also implemented rolling updates and blue-green deployments to prevent downtime during releases.

.Additionally, I integrated Terraform and Kubernetes deployment pipelines into Jenkins, 
 enabling fully automated infrastructure provisioning and application deployments.

.Our applications are secure, scalable (HPA and VM auto-scaling), and highly available (across two AZs).
 We also manage persistent volumes for application teams when required and continuously upgrade Ingress, EBS, and EFS drivers to ensure stability.

.Application teams frequently upgrade their versions, and we assist them in resolving any issues. 
 We also handle EKS upgrades, Terraform upgrades, and Jenkins agent .

.Each time the SRE team upgrades other tools, we validate our CI/CD pipelines using an internal ‘Hello World’ application to ensure compatibility.
